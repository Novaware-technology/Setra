// Arquivo: packages/backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para os perfis de usuário (roles)
model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique // 'admin', 'support', 'operador'
  userRoles UserRole[]
}

// Tabela para os perfis de usuários da plataforma (operadores, admins, etc.)
model Profile {
  id              String          @id @default(uuid())
  email           String          @unique
  name            String?
  selected_theme  String          @default("light")
  createdAt       DateTime        @default(now())
  passwordHash    String
  userRoles       UserRole[]

  // Relações atualizadas para o novo modelo de chat
  sentMessages    Message[]      @relation("OperatorSentMessages")
  conversations   Conversation[] @relation("OperatorConversations")
}

// Tabela de ligação para atribuir perfis a usuários (muitos-para-muitos)
model UserRole {
  profileId String
  roleId    Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([profileId, roleId])
}


// ======================================================= //
// ======== MODELOS FINAIS PARA LÓGICA DE CHAT =========== //
// ======================================================= //

model Conversation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  messages  Message[]

  // Apenas o operador da nossa plataforma é um link direto
  operator   Profile  @relation("OperatorConversations", fields: [operatorId], references: [id], onDelete: Cascade)
  operatorId String

  // O outro participante é apenas um texto (ex: número de telefone)
  externalParticipantIdentifier String
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  // Campo que define a origem da mensagem: do nosso operador ou do contato externo
  source         MessageSource

  // O sender SÓ é preenchido se a mensagem veio do nosso operador.
  // Se veio do contato externo, este campo fica nulo.
  operatorSender   Profile?     @relation("OperatorSentMessages", fields: [operatorSenderId], references: [id], onDelete: SetNull)
  operatorSenderId String?
}

// Enum para definir a origem da mensagem
enum MessageSource {
  OPERATOR  // Enviada pelo nosso operador da plataforma
  EXTERNAL  // Recebida do contato externo
}